
// ID of the bot (from Groupme)
var botId = "BOT_ID_GOES_HERE";
// ID of the pokemon info spreadsheet (from Google)
var infoSheetId = "INFO_SHEET_ID_GOES_HERE";
// ID of the locations spreadsheet (from Google)
var locationSheetId = "LOCATION_SHEET_ID_GOES_HERE";
    
// send text to the group as a message
function sendText(text){
  UrlFetchApp.fetch("https://api.groupme.com/v3/bots/post", {"method":"post", "payload":'{"bot_id":"' + botId + '","text":"' + text + '"}'})
}

//respond to messages sent to the group. Recieved as POST
//this method is automatically called whenever the Web App's (to be) URL is called
function doPost(e){
  var post = JSON.parse(e.postData.getDataAsString());
  var text = post.text;
  var name = post.name
  
  if (text.toLowerCase().substring(0, 5) == "!help") {
    var texttosend = "Hello there!  I'm a bot!  Here's my command list: \\n";
    texttosend = texttosend + " !where <word> - gives the location of a gym.  Use words in the gym name, or the gym's nickname.\\n";
    texttosend = texttosend + " !info <name> - gives information about a pokemon.  Use the name or partial name.";
    
    sendText(texttosend);
  }
  
  if (text.toLowerCase().substring(0, 7) == "!where ") {
    var loc = text.replace("!where ", "");
    if (loc == "")
      sendText("Error: No loc was given");
    else
      showLocation(loc);
  }
  
  if (text.toLowerCase().substring(0, 6) == "!info ") {
    var mon = text.replace("!info ", "");
    if (mon == "")
      sendText("Error: No name was given");
    else
      showPokemon(mon);
  }
}

function showLocation(text) {
  var sheet  = SpreadsheetApp.openById(locationSheetId);
  var data = sheet.getDataRange().getValues();
  var responsecount = 0;
  
  for (var i = 0; i<data.length; i++) {
    var gymname = (data[i][0]).toString().toLowerCase();
    var gymalias = data[i][1].toString().toLowerCase();
    var expossible = data[i][4].toString();
    var location = data[i][3].replace(/\s+/g, '');
    var comment = data[i][5].toString();
    var query = text.toLowerCase();
    if ((gymname.indexOf(query) >= 0) || (gymalias.indexOf(query) >= 0)) {
      responsecount = responsecount + 1;
      var texttosend = "";
      if (responsecount < 3) {
        texttosend = texttosend + "Gym Name: " + data[i][0] + "\\n";
        if (gymalias.length > 0) {
          texttosend = texttosend + "Also Known as: " + data[i][1] + "\\n";
        }
        if (comment.length > 0) {
          texttosend = texttosend + "Comment: " + comment + "\\n";
        }
        if (expossible.length > 0) {
          texttosend = texttosend + "EX Raid Gym!\\n";
        }
        texttosend = texttosend + "Address: " + data[i][2] + "\\n";
        texttosend = texttosend + "http://maps.google.com/maps?q=" + location;
        sendText(texttosend);
      }
    }
  }
}

function getTypeData(type, weakness, strength, weather) {

  switch (type) {
    case "Normal":
      weakness[1] = weakness[1] + 1;  // fighting
      
      strength[7] = strength[7] + 1;  // ghost
      
      weather[0] = weather[0] + 1;    // partly cloudy
      break;
    case "Fighting":
      weakness[2] = weakness[2] + 1;    // flying
      weakness[13] = weakness[13] + 1;  // psychic
      weakness[17] = weakness[17] + 1;  // fairy
      
      strength[5] = strength[5] + 1;    // rock
      strength[6] = strength[6] + 1;    // bug
      strength[15] = strength[15] + 1;  // dark
      
      weather[1] = weather[1] + 1;      // cloudy
      break;
    case "Flying":
      weakness[5] = weakness[5] + 1;    // rock
      weakness[12] = weakness[12] + 1;  // electric
      weakness[14] = weakness[14] + 1;  // ice
      
      strength[1] = strength[1] + 1;    // fighting
      strength[4] = strength[4] + 1;    // ground
      strength[6] = strength[6] + 1;    // bug
      strength[11] = strength[11] + 1;  // grass
      
      weather[2] = weather[2] + 1;      // windy
      break;
    case "Poison":
      weakness[4] = weakness[4] + 1;    // ground
      weakness[13] = weakness[13] + 1;  // psychic
      
      strength[1] = strength[1] + 1;    // fighting
      strength[3] = strength[3] + 1;    // poison
      strength[6] = strength[6] + 1;    // bug
      strength[11] = strength[11] + 1;  // grass
      strength[17] = strength[17] + 1;  // fairy
      
      weather[1] = weather[1] + 1;      // cloudy
      break;
    case "Ground":
      weakness[10] = weakness[10] + 1;  // water
      weakness[11] = weakness[11] + 1;  // grass
      weakness[14] = weakness[14] + 1;  // ice
      
      strength[3] = strength[3] + 1;    // poison
      strength[5] = strength[5] + 1;    // rock
      strength[12] = strength[12] + 1;  // electric
      
      weather[3] = weather[3] + 1;      // clear
      break;
    case "Rock":
      weakness[10] = weakness[10] + 1;  // water
      weakness[11] = weakness[11] + 1;  // grass
      weakness[14] = weakness[14] + 1;  // ice
      
      strength[3] = strength[3] + 1;    // poison
      strength[5] = strength[5] + 1;    // rock
      strength[12] = strength[12] + 1;  // electric
      
      weather[3] = weather[3] + 1;      // clear
      break;
    case "Bug":
      weakness[2] = weakness[2] + 1;    // flying
      weakness[5] = weakness[5] + 1;    // rock
      weakness[9] = weakness[9] + 1;    // fire
      
      strength[1] = strength[1] + 1;    // fighting
      strength[4] = strength[4] + 1;    // ground
      strength[11] = strength[11] + 1;  // grass
      
      weather[4] = weather[4] + 1;      // rain
      break;
    case "Ghost":
      weakness[7] = weakness[7] + 1;    // ghost
      weakness[15] = weakness[15] + 1;  // dark
      
      strength[0] = strength[0] + 1;    // normal
      strength[1] = strength[1] + 1;    // fighting
      strength[3] = strength[3] + 1;    // poison
      strength[6] = strength[6] + 1;    // bug
      
      weather[5] = weather[5] + 1;      // fog
      break;
    case "Steel":
      weakness[1] = weakness[1] + 1;    // fighting
      weakness[9] = weakness[9] + 1;    // fire
      weakness[4] = weakness[4] + 1;    // ground
      
      strength[0] = strength[0] + 1;    // normal
      strength[2] = strength[2] + 1;    // flying
      strength[3] = strength[3] + 1;    // poison
      strength[5] = strength[5] + 1;    // rock
      strength[6] = strength[6] + 1;    // bug
      strength[8] = strength[8] + 1;    // steel
      strength[11] = strength[11] + 1;  // grass
      strength[13] = strength[13] + 1;  // psychic
      strength[14] = strength[14] + 1;  // ice
      strength[16] = strength[16] + 1;  // dragon
      strength[17] = strength[17] + 1;  // fairy
      
      weather[6] = weather[6] + 1;      // snow
      break;
    case "Fire":
      weakness[4] = weakness[4] + 1;    // ground
      weakness[5] = weakness[5] + 1;    // rock
      weakness[10] = weakness[10] + 1;  // water
      
      strength[6] = strength[6] + 1;    // bug
      strength[17] = strength[17] + 1;  // fairy
      strength[9] = strength[9] + 1;    // fire
      strength[11] = strength[11] + 1;  // grass
      strength[14] = strength[14] + 1;  // ice
      strength[8] = strength[8] + 1;    // steel
      
      weather[3] = weather[3] + 1;      // clear
      break;
    case "Water":
      weakness[11] = weakness[11] + 1;  // grass
      weakness[12] = weakness[12] + 1;  // electric
      
      strength[8] = strength[8] + 1;    // steel
      strength[9] = strength[9] + 1;    // fire
      strength[10] = strength[10] + 1;  // water
      strength[14] = strength[14] + 1;  // ice
      
      weather[4] = weather[4] + 1;      // rain
      break;
    case "Grass":
      weakness[2] = weakness[2] + 1;    // flying
      weakness[3] = weakness[3] + 1;    // poison
      weakness[6] = weakness[6] + 1;    // bug
      weakness[9] = weakness[9] + 1;    // fire
      weakness[14] = weakness[14] + 1;  // ice
      
      strength[4] = strength[4] + 1;    // ground
      strength[10] = strength[10] + 1;  // water
      strength[11] = strength[11] + 1;  // grass
      strength[12] = strength[12] + 1;  // electric
      
      weather[3] = weather[3] + 1;      // clear
      break;
    case "Electric":
      weakness[4] = weakness[4] + 1;    // ground
      
      strength[2] = strength[2] + 1;    // flying
      strength[8] = strength[8] + 1;    // steel
      strength[12] = strength[12] + 1;  // electric
      
      weather[4] = weather[4] + 1;      // rain
      break;
    case "Psychic":
      weakness[6] = weakness[6] + 1;    // bug
      weakness[7] = weakness[7] + 1;    // ghost
      weakness[15] = weakness[15] + 1;  // dark
      
      strength[1] = strength[1] + 1;    // fighting
      strength[13] = strength[13] + 1;  // psychic
      
      weather[2] = weather[2] + 1;      // windy
      break;
    case "Ice":
      weakness[1] = weakness[1] + 1;    // fighting
      weakness[5] = weakness[5] + 1;    // rock
      weakness[8] = weakness[8] + 1;    // steel
      weakness[9] = weakness[9] + 1;    // fire
      
      strength[14] = strength[14] + 1;  // ice
      
      weather[6] = weather[6] + 1;      // snow
      break;
    case "Dark":
      weakness[6] = weakness[6] + 1;    // bug
      weakness[1] = weakness[1] + 1;    // fighting
      weakness[17] = weakness[17] + 1;  // fairy
      
      strength[15] = strength[15] + 1;  // dark
      strength[7] = strength[7] + 1;    // ghost
      strength[13] = strength[13] + 1;  // psychic
      
      weather[5] = weather[5] + 1;      // fog
      break;
    case "Dragon":
      weakness[16] = weakness[16] + 1;  // dragon
      weakness[14] = weakness[14] + 1;  // ice
      weakness[17] = weakness[17] + 1;  // fairy
      
      strength[12] = strength[12] + 1;  // electric
      strength[9] = strength[9] + 1;    // fire
      strength[11] = strength[11] + 1;  // grass
      strength[10] = strength[10] + 1;  // water
      
      weather[2] = weather[2] + 1;      // windy
      break;
    case "Fairy":
      weakness[3] = weakness[3] + 1;    // poison
      weakness[8] = weakness[8] + 1;    // steel
      
      strength[6] = strength[6] + 1;    // bug
      strength[15] = strength[15] + 1;  // dark
      strength[1] = strength[1] + 1;    // fighting
      strength[16] = strength[16] + 1;  // dragon
      
      weather[1] = weather[1] + 1;      // cloudy
      break;
  }
}

function showPokemon(text) {
  var sheet  = SpreadsheetApp.openById(infoSheetId);
  var data = sheet.getDataRange().getValues();
  var responsecount = 0;

  for (var i = 1; i<data.length; i++) {
    var pokemonname = (data[i][1]).toString().toLowerCase();
    var query = text.toLowerCase();
    if (pokemonname.indexOf(query) >= 0) {
      responsecount = responsecount + 1;
      
      // work out the expected CPs for raids
      var atk = data[i][4];
      var def = data[i][5];
      var sta = data[i][3];
      var lvl20mult = 0.59740001;
      var lvl25mult = 0.667934;
      
      var lvl20cp = ((atk+15.0)*Math.pow(def+15.0,0.5)*Math.pow(sta+15.0,0.5)*Math.pow(lvl20mult,2)/10);
      var lvl25cp = ((atk+15.0)*Math.pow(def+15.0,0.5)*Math.pow(sta+15.0,0.5)*Math.pow(lvl25mult,2)/10);
      var lvl20nun = ((atk+10.0)*Math.pow(def+10.0,0.5)*Math.pow(sta+10.0,0.5)*Math.pow(lvl20mult,2)/10);
      var lvl25nun = ((atk+10.0)*Math.pow(def+10.0,0.5)*Math.pow(sta+10.0,0.5)*Math.pow(lvl25mult,2)/10);

      // get the types, and capitalize them
      var type1 = data[i][6];
      type1 = type1.charAt(0).toUpperCase() + type1.slice(1);
      var type2 = data[i][7];
      type2 = type2.charAt(0).toUpperCase() + type2.slice(1);
      
      var weakness = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
      var strength = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
      var weather = [0,0,0,0,0,0,0,0,0,0];
            
      // get the type data for the first type
      getTypeData(type1, weakness, strength, weather);
      // if there's a second type, get the type data for that type
      if (type2.length > 0) {
        getTypeData(type2, weakness, strength, weather);
      }
      
      var typeNames = ["Normal", "Fighting", "Flying", "Poison", "Ground", "Rock", "Bug", "Ghost", "Steel", "Fire", "Water", "Grass", "Electric", "Psychic", "Ice", "Dark", "Dragon", "Fairy"];
      var weatherNames = ["Partly Cloudy", "Cloudy", "Windy", "Clear", "Rain", "Fog", "Snow"];
      
      // search for weaknesses
      var weakList = "";
      for (var w=0; w<18; w++) {
        if (weakness[w] == 2) {
          if (weakList.length > 0) {
            weakList = weakList + ", ";
          }
          weakList = weakList + typeNames[w] + "(x2)";
        }
        if (weakness[w] == 1) {
          if (weakList.length > 0) {
            weakList = weakList + ", ";
          }
          weakList = weakList + typeNames[w];
        }
      }

      // search for strengths
      var strongList = "";
      for (var s=0; s<18; s++) {
        if (strength[s] == 2) {
          if (strongList.length > 0) {
            strongList = strongList + ", ";
          }
          strongList = strongList + typeNames[s] + "(x2)";
        }
        if (strength[s] == 1) {
          if (strongList.length > 0) {
            strongList = strongList + ", ";
          }
          strongList = strongList + typeNames[s];
        }
      }
      
      // search for weather boost
      var weatherBoost = "";
      for (var wb=0; wb<7; wb++) {
        if (weather[wb] > 0) {
          weatherBoost = weatherNames[wb];
        }
      }
      
      // compose the response message
      var texttosend = "";
      if (responsecount < 3) {
        // name
        texttosend = data[i][1] + "\\n";
        // type
        texttosend = texttosend + "Type: " + type1;
        if (type2.length > 0) {
          texttosend = texttosend + ", " + type2;
        }
        texttosend = texttosend + "\\n";
        // weak to
        if (weakList.length > 0) {
          texttosend = texttosend + "Weak to: " + weakList + "\\n";
        }
        // strong against
        if (strongList.length > 0) {
          texttosend = texttosend + "Strong against: " + strongList + "\\n";
        }
        // weather boost
        texttosend = texttosend + "Weather Boost: " + weatherBoost + "\\n";
        // raid cps
        texttosend = texttosend + "100 IV Raid CP (normal): " + Math.floor(lvl20cp).toString() + "   (boosted): " + Math.floor(lvl25cp).toString() + "\\n";
        texttosend = texttosend + "Min IV Raid CP (normal): " + Math.floor(lvl20nun).toString() + "   (boosted): " + Math.floor(lvl25nun).toString() + "\\n";
        // link
        texttosend = texttosend + "https://db.pokemongohub.net/pokemon/" + data[i][0];
        // video link
        var vidlink = data[i][10].toString();
        if (vidlink.length > 0) {
          texttosend = texttosend + "\\n" + vidlink;
        }
        sendText(texttosend);
      }
      
      // if this is an exact match, don't look for more
      if (pokemonname == query) {
        responsecount = 100;
      }
    }
  }
}
